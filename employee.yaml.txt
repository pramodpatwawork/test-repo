openapi: "3.0.3"
info:
  title: Employee Service
  description: Service will expose API to perform CRUD operation on employee object
  license:
    name: MIT
    url: https://example-lisence.com/licenses/LICENSE-2.0.html
  contact:
    name: Employee API Support
    url: http://support-employee.com
    email: support@example.com
  version: 1.0.0
servers:
  - url: http://dev.employee/service/v1
    description: "Development server"
  - url: https://staging.employee.com/v1
    description: "Staging Server"
paths:
  /epmoyees:
    get:
      summary: List all pets
      operationId: listPets
      tags:
        - pets
      parameters:
        - name: limit
          in: query
          description: How many items to return at one time (max 100)
          required: false
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: A paged array of pets
          headers:
            x-next:
              description: A link to the next page of responses
              schema:
                type: string
          content:
            application/json:    
              schema:
                $ref: "#/components/schemas/Employees"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: Create a pet
      operationId: createPets
      tags:
        - pets
      responses:
        '201':
          description: Null response
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /pets/{petId}:
    get:
      summary: Info for a specific pet
      operationId: showPetById
      tags:
        - pets
      parameters:
        - name: petId
          in: path
          required: true
          description: The id of the pet to retrieve
          schema:
            type: string
      responses:
        '200':
          description: Employee list
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Employees"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
components:
  schemas:
    Pet:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        tag:
          type: string
    Pets:
      type: array
      items:
        $ref: "#/components/schemas/Pet"
        
    Employees:
      type: array
      items:
        $ref: "#/components/schemas/Employee"
    
    Employee:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: integer
          format: int64
          minimum: 0
          example: 1
          readOnly: true
        name:
          type: string
          minLength: 6
          maxLength: 30
          pattern: "^[A-Za-z][A-Za-z0-9_]{7,29}$"
          example: "John Terner"
        age:
          type : integer
          format: int32
          minimum: 0
          maximum: 150
        depratment:
          type: string
          enum: ["SALES","HR", "DEVELOPMENT"]
        contact:
          $ref: "#/components/schemas/Contact"
    Contact: 
      type: object
      required:
        - email
        - Address
      properties:
        email:
          type: string
          format: email
          pattern: "[a-z0-9]+@employeeexample.com"
          minLength: 10
          maxLength: 30
          example: 1
        phone:
          type: string
          minLength: 6
          maxLength: 12
          pattern: "^[0-9+]$"
          example: "+91123456789"
        address:
          $ref: "#/components/schemas/Address"
    Address: 
      type: object
      required:
        - street
        - city
      properties:
        street:
          type: string
          pattern: "^[A-Za-z0-9_ ]$"
          minLength: 1
          maxLength: 50
          example: "Example street"
        city:
          type: string
          format: email
          pattern: "^[A-Za-z0-9_ ]$"
          minLength: 1
          maxLength: 30
          example: "Indore"
        country:
          type: string
          pattern: "^[A-Za-z0-9_ ]$"
          minLength: 1
          maxLength: 30
          example: "India"
      
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string